from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors import FloodWait
from ChampuMusic import app
from ChampuMusic.utils.database import get_assistant
from ChampuMusic.plugins.tools.invitelink import get_invite_link
import asyncio
import random

# Replace this with your actual log group chat ID
LOG_GROUP_ID = -1001423108989

async def send_log(message: str, chat_id: int = None, chat_title: str = None):
    try:
        if chat_id and chat_title:
            invite_link = await get_invite_link(chat_id)
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("Channel Link", url=invite_link)]])
            await app.send_message(LOG_GROUP_ID, message, reply_markup=keyboard)
        else:
            await app.send_message(LOG_GROUP_ID, message)
    except Exception as e:
        print(f"“ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è s·¥á…¥·¥Ö  ü·¥è…¢ ·¥ç·¥áss·¥Ä…¢·¥á: {str(e)}")

async def retry_with_backoff(func, *args, max_retries=5, initial_delay=1, **kwargs):
    retries = 0
    while retries < max_retries:
        try:
            return await func(*args, **kwargs)
        except FloodWait as e:
            retries += 1
            delay = initial_delay * (2 ** retries) + random.uniform(0, 1)
            await send_log(f"“ì ü·¥è·¥è·¥Ö·¥°·¥Ä…™·¥õ ·¥Ö·¥á·¥õ·¥á·¥Ñ·¥õ·¥á·¥Ö.  Ä·¥á·¥õ Ä è…™…¥…¢ …™…¥ {delay:.2f} s·¥á·¥Ñ·¥è…¥·¥Ös...")
            await asyncio.sleep(delay)
    raise Exception(f"“ì·¥Ä…™ ü·¥á·¥Ö ·¥Ä“ì·¥õ·¥á Ä {max_retries}  Ä·¥á·¥õ Ä…™·¥ás")

@app.on_message(filters.command("react"))
async def react_to_message(client, message: Message):
    if message.reply_to_message:
        try:
            emoji = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else 'üëç'
            
            assistant = await get_assistant(message.chat.id)
            if assistant:
                await retry_with_backoff(
                    assistant.send_reaction,
                    chat_id=message.chat.id,
                    message_id=message.reply_to_message.id,
                    emoji=emoji
                )
            else:
                await message.reply("·¥Äss…™s·¥õ·¥Ä…¥·¥õ …¥·¥è·¥õ ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á  ú·¥á Ä·¥á “ì·¥è Ä  Ä·¥á·¥Ä·¥Ñ·¥õ ·¥è…¥ ·¥ç·¥áss·¥Ä…¢·¥á.")
        except Exception as e:
            await message.reply(f"“ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è s·¥á…¥·¥Ö  Ä·¥á·¥Ä·¥Ñ·¥õ…™·¥è…¥. ·¥á Ä Ä ·¥è Ä: {str(e)}")
    else:
        await message.reply(" Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è  Ä·¥á·¥Ä·¥Ñ·¥õ.")

@app.on_message(filters.new_chat_members)
async def new_member(client, message: Message):
    if message.new_chat_members:
        for member in message.new_chat_members:
            if member.id == client.me.id:
                assistant = await get_assistant(message.chat.id)
                if assistant:
                    await retry_with_backoff(assistant.join_chat, message.chat.id)
                else:
                    await message.reply("·¥Äss…™s·¥õ·¥Ä…¥·¥õ …¥·¥è·¥õ ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á  ú·¥á Ä·¥á “ì·¥è Ä ·¥ä·¥è…™…¥…™…¥…¢ ·¥Ñ ú·¥Ä·¥õ.")